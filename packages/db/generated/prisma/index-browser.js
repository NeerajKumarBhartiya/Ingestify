
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TenantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  apiKey: 'apiKey',
  createdAt: 'createdAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  tenantId: 'tenantId'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  userId: 'userId',
  created_at: 'created_at',
  updated_at: 'updated_at',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  phone: 'phone',
  state: 'state',
  note: 'note',
  verified_email: 'verified_email',
  tax_exempt: 'tax_exempt',
  currency: 'currency',
  admin_graphql_api_id: 'admin_graphql_api_id'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  customer_id: 'customer_id',
  first_name: 'first_name',
  last_name: 'last_name',
  company: 'company',
  address1: 'address1',
  address2: 'address2',
  city: 'city',
  province: 'province',
  country: 'country',
  zip: 'zip',
  phone: 'phone',
  name: 'name',
  province_code: 'province_code',
  country_code: 'country_code',
  country_name: 'country_name',
  is_default: 'is_default'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  admin_graphql_api_id: 'admin_graphql_api_id',
  title: 'title',
  body_html: 'body_html',
  vendor: 'vendor',
  product_type: 'product_type',
  handle: 'handle',
  status: 'status',
  tags: 'tags',
  published_scope: 'published_scope',
  created_at: 'created_at',
  updated_at: 'updated_at',
  published_at: 'published_at',
  has_variants_that_requires_components: 'has_variants_that_requires_components',
  category: 'category'
};

exports.Prisma.VariantScalarFieldEnum = {
  id: 'id',
  admin_graphql_api_id: 'admin_graphql_api_id',
  product_id: 'product_id',
  title: 'title',
  price: 'price',
  compare_at_price: 'compare_at_price',
  position: 'position',
  sku: 'sku',
  taxable: 'taxable',
  option1: 'option1',
  option2: 'option2',
  option3: 'option3',
  inventory_policy: 'inventory_policy',
  inventory_quantity: 'inventory_quantity',
  old_inventory_quantity: 'old_inventory_quantity',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  shopify_id: 'shopify_id',
  tenantId: 'tenantId',
  customer_id: 'customer_id',
  admin_graphql_api_id: 'admin_graphql_api_id',
  email: 'email',
  name: 'name',
  note: 'note',
  currency: 'currency',
  financial_status: 'financial_status',
  fulfillment_status: 'fulfillment_status',
  order_number: 'order_number',
  order_status_url: 'order_status_url',
  processed_at: 'processed_at',
  cancelled_at: 'cancelled_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  tags: 'tags',
  total_price: 'total_price',
  subtotal_price: 'subtotal_price',
  total_tax: 'total_tax',
  total_discounts: 'total_discounts',
  source_name: 'source_name',
  confirmed: 'confirmed',
  buyer_accepts_marketing: 'buyer_accepts_marketing',
  test: 'test'
};

exports.Prisma.LineItemScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  admin_graphql_api_id: 'admin_graphql_api_id',
  title: 'title',
  name: 'name',
  sku: 'sku',
  quantity: 'quantity',
  price: 'price',
  grams: 'grams',
  product_id: 'product_id',
  taxable: 'taxable',
  fulfillment_service: 'fulfillment_service',
  gift_card: 'gift_card'
};

exports.Prisma.ShippingLineScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  title: 'title',
  price: 'price',
  source: 'source'
};

exports.Prisma.OrderAddressScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  type: 'type',
  first_name: 'first_name',
  last_name: 'last_name',
  company: 'company',
  address1: 'address1',
  address2: 'address2',
  city: 'city',
  province: 'province',
  country: 'country',
  zip: 'zip',
  phone: 'phone',
  name: 'name',
  province_code: 'province_code',
  country_code: 'country_code',
  country_name: 'country_name'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Tenant: 'Tenant',
  User: 'User',
  Customer: 'Customer',
  Address: 'Address',
  Product: 'Product',
  Variant: 'Variant',
  Order: 'Order',
  LineItem: 'LineItem',
  ShippingLine: 'ShippingLine',
  OrderAddress: 'OrderAddress'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
